//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LumixDriverWrapper {

public class LMX_CONNECT_DEVICE_INFO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LMX_CONNECT_DEVICE_INFO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LMX_CONNECT_DEVICE_INFO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LMX_CONNECT_DEVICE_INFO obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LMX_CONNECT_DEVICE_INFO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LumixDriverPINVOKE.delete_LMX_CONNECT_DEVICE_INFO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_UINT32 find_PnpDevice_Count {
    set {
      LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_Count_set(swigCPtr, SWIGTYPE_p_UINT32.getCPtr(value));
      if (LumixDriverPINVOKE.SWIGPendingException.Pending) throw LumixDriverPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_UINT32 ret = new SWIGTYPE_p_UINT32(LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_Count_get(swigCPtr), true);
      if (LumixDriverPINVOKE.SWIGPendingException.Pending) throw LumixDriverPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_PWSTR find_PnpDevice_IDs {
    set {
      LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_IDs_set(swigCPtr, SWIGTYPE_p_PWSTR.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_IDs_get(swigCPtr);
      SWIGTYPE_p_PWSTR ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PWSTR(cPtr, false);
      return ret;
    } 
  }

  public LMX_DEV_INFO find_PnpDevice_Info {
    set {
      LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_Info_set(swigCPtr, LMX_DEV_INFO.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LumixDriverPINVOKE.LMX_CONNECT_DEVICE_INFO_find_PnpDevice_Info_get(swigCPtr);
      LMX_DEV_INFO ret = (cPtr == global::System.IntPtr.Zero) ? null : new LMX_DEV_INFO(cPtr, false);
      return ret;
    } 
  }

  public LMX_CONNECT_DEVICE_INFO() : this(LumixDriverPINVOKE.new_LMX_CONNECT_DEVICE_INFO(), true) {
  }

}

}
